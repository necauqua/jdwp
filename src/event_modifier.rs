use crate::{
    codec::JdwpWritable,
    enums::{ModifierKind, StepDepth, StepSize},
    types::{FieldID, Location, ObjectID, ReferenceTypeID, ThreadID},
};

#[derive(Debug, Clone, PartialEq, Eq, Hash, JdwpWritable)]
#[repr(u8)]
pub enum Modifier {
    /// Limit the requested event to be reported at most once after a given
    /// number of occurrences.
    ///
    /// The event is not reported the first count - 1 times this filter is
    /// reached.
    ///
    /// To request a one-off event, call this method with a count of 1.
    ///
    /// Once the count reaches 0, any subsequent filters in this request are
    /// applied.
    ///
    /// If none of those filters cause the event to be suppressed, the event is
    /// reported.
    ///
    /// Otherwise, the event is not reported.
    ///
    /// In either case subsequent events are never reported for this request.
    ///
    /// This modifier can be used with any event kind.
    Count(
        /// Count before event. One for one-off
        i32,
    ) = ModifierKind::Count as u8,
    /// Conditional on expression
    Conditional {
        /// For the future
        expr_id: i32,
    } = ModifierKind::Conditional as u8,
    /// Restricts reported events to those in the given thread.
    /// This modifier can be used with any event kind except for class unload.
    ThreadOnly(
        /// Required thread
        ThreadID,
    ) = ModifierKind::ThreadOnly as u8,
    /// For class prepare events, restricts the events generated by this request
    /// to be the preparation of the given reference type and any subtypes.
    ///
    /// For monitor wait and waited events, restricts the events generated by
    /// this request to those whose monitor object is of the given reference
    /// type or any of its subtypes.
    ///
    /// For other events, restricts the events generated by this request to
    /// those whose location is in the given reference type or any of its
    /// subtypes.
    ///
    /// An event will be generated for any location in a reference type that can
    /// be safely cast to the given reference type.
    ///
    /// This modifier can be used with any event kind except class unload,
    /// thread start, and thread end.
    ClassOnly(
        /// Required class
        ReferenceTypeID,
    ) = ModifierKind::ClassOnly as u8,
    /// Restricts reported events to those for classes whose name matches the
    /// given restricted regular expression.
    ///
    /// For class prepare events, the prepared class name is matched.
    ///
    /// For class unload events, the unloaded class name is matched.
    ///
    /// For monitor wait and waited events, the name of the class of the monitor
    /// object is matched.
    ///
    /// For other events, the class name of the event's location is matched.
    ///
    /// This modifier can be used with any event kind except thread start and
    /// thread end.
    ClassMatch(
        /// Required class pattern.
        ///
        /// Matches are limited to exact matches of the given class pattern and
        /// matches of patterns that begin or end with `*`; for example, `*.Foo`
        /// or `java.*`.
        String,
    ) = ModifierKind::ClassMatch as u8,
    /// Restricts reported events to those for classes whose name does not match
    /// the given restricted regular expression.
    ///
    /// For class prepare events, the prepared class name is matched.
    ///
    /// For class unload events, the unloaded class name is matched.
    ///
    /// For monitor wait and waited events, the name of the class of the monitor
    /// object is matched.
    ///
    /// For other events, the class name of the event's location is matched.
    ///
    /// This modifier can be used with any event kind except thread start and
    /// thread end.
    ClassExclude(
        /// Disallowed class pattern.
        ///
        /// Matches are limited to exact matches of the given class pattern and
        /// matches of patterns that begin or end with `*`; for example, `*.Foo`
        /// or `java.*`.
        String,
    ) = ModifierKind::ClassExclude as u8,
    /// Restricts reported events to those that occur at the given location.
    ///
    /// This modifier can be used with breakpoint, field access, field
    /// modification, step, and exception event kinds.
    LocationOnly(
        /// Required location
        Location,
    ) = ModifierKind::LocationOnly as u8,
    /// Restricts reported exceptions by their class and whether they are caught
    /// or uncaught.
    ///
    /// This modifier can be used with exception event kinds only.
    ExceptionOnly {
        /// Exception to report. `None` means report exceptions of all types.
        ///
        /// A non-null type restricts the reported exception events to
        /// exceptions of the given type or any of its subtypes.
        exception: Option<ReferenceTypeID>,
        /// Report caught exceptions
        uncaught: bool,
        /// Report uncaught exceptions.
        ///
        /// Note that it is not always possible to determine whether an
        /// exception is caught or uncaught at the time it is thrown.
        ///
        /// See the exception event catch location under composite events for
        /// more information.
        caught: bool,
    } = ModifierKind::ExceptionOnly as u8,
    /// Restricts reported events to those that occur for a given field.
    ///
    /// This modifier can be used with field access and field modification event
    /// kinds only.
    FieldOnly(
        /// Type in which field is declared
        ReferenceTypeID,
        /// Required field
        FieldID,
    ) = ModifierKind::FieldOnly as u8,
    /// Restricts reported step events to those which satisfy depth and size
    /// constraints.
    ///
    /// This modifier can be used with step event kinds only.
    Step(
        /// Thread in which to step
        ThreadID,
        /// Size of each step
        StepSize,
        /// Relative call stack limit
        StepDepth,
    ) = ModifierKind::Step as u8,
    /// Restricts reported events to those whose active 'this' object is the
    /// given object.
    ///
    /// Match value is the null object for static methods.
    ///
    /// This modifier can be used with any event kind except class prepare,
    /// class unload, thread start, and thread end.
    ///
    /// Introduced in JDWP version 1.4.
    InstanceOnly(
        /// Required 'this' object
        ObjectID,
    ) = ModifierKind::InstanceOnly as u8,
    /// Restricts reported class prepare events to those for reference types
    /// which have a source name which matches the given restricted regular
    /// expression.
    ///
    /// The source names are determined by the reference type's
    /// SourceDebugExtension.
    ///
    /// This modifier can only be used with class prepare events.
    ///
    /// Since JDWP version 1.6.
    ///
    /// Requires the `can_use_source_name_filters` capability - see
    /// [CapabilitiesNew](crate::commands::virtual_machine::CapabilitiesNew).
    SourceNameMatch(
        /// Required source name pattern.
        /// Matches are limited to exact matches of the given pattern and
        /// matches of patterns that begin or end with `*`; for example,
        /// `*.Foo` or `java.*`
        String,
    ) = ModifierKind::SourceNameMatch as u8,
}
