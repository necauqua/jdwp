name: CI

on:
  push:
    branches:
      - main
      - staging
      - trying
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  ci: # this is likely not needed, but I'm not 100% sure
    name: CI
    needs:
      - fmt
      - clippy
      - docs
      - test

    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: exit 0

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Run rustfmt check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  clippy:
    name: Clippy
    needs:
      - fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: clippy

      - name: Fix cache (Linux)
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Setup cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: ${{ runner.os }}-nightly-clippy-cargo-target-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-nightly-cargo-target-${{ hashFiles('**/Cargo.toml') }}

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features

  docs:
    name: Docs
    needs:
      - clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Fix cache (Linux)
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Setup cache
        uses: actions/cache@v2
        id: cache-doc
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: ${{ runner.os }}-nightly-doc-cargo-target-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-nightly-cargo-target-${{ hashFiles('**/Cargo.toml') }}

      - name: Run doctests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --doc --all-features

      - name: Run docs check
        uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: "--cfg nightly"
          RUSTFLAGS: "--cfg nightly"
        with:
          command: doc
          args: --no-deps --all-features

  test:
    name: Run tests (${{ matrix.os.name }}, Rust ${{ matrix.rust.name }}, Java ${{ matrix.java }})
    needs:
      - docs
    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: Windows, version: windows-latest }
          - { name: Linux, version: ubuntu-latest }
        rust:
          - { name: MSRV, version: 1.66.1 }
          - { name: Stable, version: stable }
          - { name: Nightly, version: nightly }
        java:
          - 8
          - 11
          - 17
    runs-on: ${{ matrix.os.version }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust.version }}
          override: true

      - name: Fix cache (Linux)
        if: matrix.os.version == 'ubuntu-latest'
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Setup cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust.version }}-cargo-target-${{ hashFiles('**/Cargo.toml') }}

      - name: Build
        run: cargo build --all-targets --all-features

      - name: Test
        shell: bash
        timeout-minutes: 5 # integration tests can deadlock potentially, and atm testing takes like 0.7s on ryzen 3900xt
        run: cargo test  --all-targets --all-features
